#INCLUDE "course.module"

-- COPYRIGHT    : P.H.Welch, 1984
-- MODIFICATION : T.Curtis, 1988
-- MODIFICATION : P.H.Welch, 2007, 2011

--{{{  COMMENT documentation
--
--               Inside the Sort Pump (version 2)
--               --------------------------------
--
-- This demonstrates the internal behaviour of the sort pump.
--
-- This is a more realistic than version 1.  Cell reports are
-- processed individually whenever made, so the cells can cycle
-- independently (not in lock-step).  A delay process (that holds
-- up each passing number by half a second) is placed at the end
-- of the sort pump, as part of the test-rig.  If you can type
-- characters faster than 2 per second, you will see the sort pump
-- fill up.  In a real application, data will be being supplied
-- faster than the pump cells can cycle, so all will be busy all
-- the time - which is the point of the exercise!
--
--
-- Each cell in the sort pump has two registers: one holds the
-- `heavy' character it is retaining and the other holds the
-- latest character to arrive.  This program shows this pair
-- of registers as adjacent characters.  The sort pump is thus
-- represented by a line of 15 character pairs, one for each
-- cell.  Each cell refreshes the display of its internal state
-- after inputting the latest character and just before it
-- compares this with the retained chacter.  Characters from
-- the keyboard are output directly into the sort pump, which
-- cause the states of all cells to be updated.  Characters
-- leaving the sort pump are layed out lower on the screen.
-- Characters leaving the sort pump are deliberately delayed
-- to a (slow) human typing speed, so that the capacities
-- in the cells can be experimented with and demonstrated.
--
-- The end-markers separating the character groups being sorted
-- are represented by dots.  Initially, all the cells in the
-- sort pump contain these end-markers.
--
-- The screen is controlled by a simple de-multiplexer of its
-- vector of input channels.
--
-- Since the pump is only 15 cells long, the keyboard process
-- does not allow groups of more than 16 characters to be sent.
--
--}}}

--{{{  global constants
VAL BYTE end.char    IS '.':
VAL BYTE end.marker  IS 255:
VAL BYTE end.message IS 252:
VAL  INT total       IS 16:
VAL  INT interval    IS 500000:   -- throttle delay (microseconds)
--}}}

--{{{  sort cycles

-- printable ::= ' '..'~'

--{{{  PROC reporting.cell (VAL INT p,  CHAN BYTE in?, report!, out!)
PROC reporting.cell (CHAN BYTE in?, report!, out!)
  --{{{  COMMENT some documentation on the traffic carried by in and out
  --
  -- in ? {{printable}* end.marker}*
  -- out ! {{printable}* end.marker}*
  -- report ! {next-character largest-so-far-character}*
  --
  -- ASSUME : end.marker > {printable}
  --
  -- This version always reports the two items it is holding
  -- whenever anything changes.  The second of these is the
  -- largest number, so far, in the group being processed.
  --
  -- In between groups, the cell holds no items and then only
  -- one, as the first item arrives.  At the end of each inner
  -- loop, the cell only holds one item (the largest), having
  -- sent on the other.  At these times, the 'end.marker' is
  -- substituted for missing items (since two items must always
  -- be reported.  A reported 'end.marker' will be rendered as
  -- 'end.char' (".") by the 'screen.plex' process.
  --
  --}}}
  WHILE TRUE
    BYTE largest:
    SEQ
      --{{{  output monitor info
      SEQ
        report ! end.marker
        report ! end.marker
      --}}}
      in ? largest
      --{{{  output monitor info
      SEQ
        report ! end.marker
        report ! largest
      --}}}
      WHILE largest <> end.marker
        BYTE next:
        SEQ
          in ? next
          --{{{  output monitor info
          SEQ
            report ! next
            report ! largest
          --}}}
          IF
            (largest >= next)
              out ! next
            TRUE
              SEQ
                out ! largest
                largest := next
          --{{{  output monitor info
          SEQ
            report ! end.marker
            report ! largest
          --}}}
      out ! end.marker
:
--}}}

--{{{  PROC sort (CHAN BYTE in?, []CHAN BYTE monitor!, CHAN BYTE out!)
PROC sort (CHAN BYTE in?, []CHAN BYTE monitor!, CHAN BYTE out!)
  --{{{  COMMENT some documentation on the traffic carried by in and out
  --
  -- in ? {{printable}* end.marker}*
  -- out ! {{printable}* end.marker}*
  -- monitor[p] ! {next-chacter retained-character}*
  --
  -- ASSUME : end.marker > {printable}
  --
  --}}}
  [total - 2]CHAN BYTE c:
  PAR
    reporting.cell (in?, monitor[0]!, c[0]!)
    PAR p = 1 FOR total - 3
      reporting.cell (c[p - 1]?, monitor[p]!, c[p]!)
    reporting.cell (c[total - 3]?, monitor[total - 2]!, out!)
:
--}}}

--}}}

--{{{  test rig

--{{{  PROC decode.escape (CHAN BYTE in?, BYTE ch)
PROC decode.escape (CHAN BYTE in?, BYTE ch)
  SKIP -- should process <ESC>-sequence generated from keyboard
:
--}}}

--{{{  PROC keyboard.manage (CHAN BYTE in?, echo!, out!)
PROC keyboard.manage (CHAN BYTE in?, echo!, out!)
  --{{{  local constants
  VAL BYTE lo IS ' ':
  VAL BYTE hi IS '~':
  --}}}
  --{{{  state variables
  INT count:
  --}}}
  SEQ
    --{{{  initialise
    count := 0
    --}}}
    --{{{  main cycle
    WHILE TRUE
      BYTE ch:
      SEQ
        in ? ch
        IF
          ch = end.char
            --{{{  
            SEQ
              out ! end.marker
              count := 0
            --}}}
          (lo <= ch) AND (ch <= hi)
            --{{{  
            IF
              (count = total)
                SEQ
                  echo ! BELL
                  echo ! end.message
                  out ! end.marker
                  out ! ch
                  count := 1
              (TRUE)
                SEQ
                  out ! ch
                  count := count + 1
            --}}}
          ch = ESCAPE
            --{{{  
            SEQ
              decode.escape (in?, ch)
              echo ! BELL
              echo ! end.message
            --}}}
          TRUE
            --{{{  
            SEQ
              echo ! BELL
              echo ! end.message
            --}}}
    --}}}
:
--}}}

--{{{  PROC screen.plex (VAL INT n.inputs,  []CHAN BYTE in?,  CHAN BYTE out!)
PROC screen.plex (VAL INT n.inputs,  []CHAN BYTE in?,  CHAN BYTE out!)
  SEQ
    --{{{  initialise (clear screen)
    SEQ
      cursor.x.y (1, 1, out!)
      erase.eos (out!)
      flush (out!)
    --}}}
    --{{{  main cycle
    WHILE TRUE
      ALT i = 0 FOR n.inputs
        BYTE ch:
        in[i] ? ch
          --{{{  lock on to this channel for the whole message
          SEQ
            WHILE ch <> end.message
              SEQ
                --{{{  end.marker --> end.char
                IF
                  ch = end.marker
                    ch := end.char
                  TRUE
                    SKIP
                --}}}
                out ! ch
                in[i] ? ch
            flush (out!)
          --}}}
    --}}}
:
--}}}

--{{{  PROC history CHAN BYTE in?, out!)
PROC history (CHAN BYTE in?, out!)
  VAL BYTE first.line IS 6:
  VAL BYTE last.line IS 23:
  VAL BYTE first.col IS 1:
  BYTE xx, yy:
  SEQ
    --{{{  initialise
    SEQ
      xx := first.col
      yy := first.line
    --}}}
    --{{{  main cycle
    WHILE TRUE
      BYTE ch:
      SEQ
        in ? ch
        IF
          ch <> end.marker
            --{{{  
            SEQ
              cursor.x.y (xx, yy, out!)
              out ! ch
              out ! end.message
              xx := xx + 1
            --}}}
          xx > first.col
            --{{{  
            SEQ
              xx := first.col
              IF
                (yy < last.line)
                  yy := yy + 1
                (TRUE)
                  yy := first.line
              cursor.x.y (xx, yy, out!)
              erase.eol (out!)
              out ! end.message
            --}}}
          TRUE
            SKIP
    --}}}
:
--}}}

--{{{  PROC report.plex ([]CHAN BYTE monitor?, CHAN BYTE out!)
PROC report.plex.2 ([]CHAN BYTE monitor?, CHAN BYTE out!)
  WHILE TRUE
    ALT i = 0 FOR SIZE monitor?
      BYTE next, largest:
      monitor[i] ? next
        SEQ
          monitor[i] ? largest
          cursor.x.y (3 + ((BYTE i)*5), 3, out!)
          out ! next
          out ! largest
          out ! end.message
:
--}}}

--{{{  PROC delay.2 (VAL INT gap, CHAN BYTE in?, out!)
PROC delay.2 (VAL INT gap, CHAN BYTE in?, out!)
  --{{{  COMMENT
  --
  -- This is a time-delaying process.  It waits 'gap' time units between
  -- inputting a number and outputting it.  It's used in the testrig to
  -- slow down the actions inside the sort pump, so that we can see what
  -- is happening!
  --
  --}}}
  WHILE TRUE
    BYTE b:
    TIMER tim:
    INT t:
    SEQ
      in ? b
      tim ? t
      tim ? AFTER t PLUS gap
      out ! b
:
--}}}

--{{{  PROC test.rig (CHAN BYTE in?, out!, probe.in?, probe.out!, []CHAN BYTE monitor?)
PROC test.rig (CHAN BYTE in?, out!, probe.in?, probe.out!,
               []CHAN BYTE monitor?)
  VAL INT n.screen.inputs IS 3:
  [n.screen.inputs]CHAN BYTE mess:
  CHAN BYTE c:
  PAR
    keyboard.manage (in?, mess[0]!, probe.out!)
    report.plex.2 (monitor?, mess[1]!)
    delay.2 (interval, probe.in?, c!)
    history (c?, mess[2]!)
    screen.plex (n.screen.inputs, mess?, out!)
:
--}}}

PROC sort.inside.2 (CHAN BYTE keyboard?, screen!, error!)
  CHAN BYTE a, b:
  [total - 1]CHAN BYTE monitor:
  PAR
    sort (a?, monitor!, b!)
    test.rig (keyboard?, screen!, b?, a!, monitor?)
:
